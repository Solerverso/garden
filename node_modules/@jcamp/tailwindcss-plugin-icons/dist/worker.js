"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _nodefs = require("node:fs");
var _nodebuffer = require("node:buffer");
var _encodesvgforcss = require("@iconify/utils/lib/svg/encode-svg-for-css");
var _loader = require("./loader");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
// Tailwind does not support async plugins
// So my workaround is to load icon in a worker process with spawnSync
// credit: https://github.com/InfiniteXyy/tailwindcss-iconify/
var COLLECTION_NAME_PARTS_MAX = 3;
var iconName = process.argv[2];
if (!iconName) process.exit(0);
var modeOverride = process.argv[3];
if (!modeOverride) process.exit(0);
var optionsText = _nodebuffer.Buffer.from(process.argv[4], "base64").toString("ascii");
var options = JSON.parse(optionsText);
var _options_scale = options.scale, scale = _options_scale === void 0 ? 1.2 : _options_scale, _options_warn = options.warn, warn = _options_warn === void 0 ? false : _options_warn, _options_jsonCollections = options.jsonCollections, jsonCollections = _options_jsonCollections === void 0 ? {} : _options_jsonCollections, _options_extraCssProperties = options.extraCssProperties, extraCssProperties = _options_extraCssProperties === void 0 ? {
    display: "inline-block",
    "vertical-align": "middle"
} : _options_extraCssProperties, _options_customizations = options.customizations, customizations = _options_customizations === void 0 ? {} : _options_customizations, _options_autoInstall = options.autoInstall, autoInstall = _options_autoInstall === void 0 ? false : _options_autoInstall, unit = options.unit;
var customCollections = {};
Object.keys(jsonCollections).forEach(function(key) {
    var file = jsonCollections[key];
    if ((0, _nodefs.statSync)(file)) {
        try {
            customCollections[key] = /*#__PURE__*/ _async_to_generator(function() {
                var content;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                _nodefs.promises.readFile(file, "utf8")
                            ];
                        case 1:
                            content = _state.sent();
                            return [
                                2,
                                JSON.parse(content)
                            ];
                    }
                });
            });
        } catch (err) {
            if (warn) console.warn("[tw-icons]", 'problem reading json collection "'.concat(file, '"'));
        }
    }
});
var _options_mode = options.mode, mode = _options_mode === void 0 ? "auto" : _options_mode;
if (modeOverride !== "def") {
    mode = modeOverride;
}
var loaderOptions = {
    addXmlNs: true,
    scale: scale,
    customCollections: customCollections,
    autoInstall: autoInstall,
    // avoid warn from @iconify/loader: we'll warn below if not found
    warn: undefined,
    customizations: _object_spread_props(_object_spread({}, customizations), {
        additionalProps: _object_spread({}, extraCssProperties),
        trimCustomSvg: true,
        iconCustomizer: function iconCustomizer(collection, icon, props) {
            return _async_to_generator(function() {
                var _customizations_iconCustomizer, _customizations;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                (_customizations_iconCustomizer = (_customizations = customizations).iconCustomizer) === null || _customizations_iconCustomizer === void 0 ? void 0 : _customizations_iconCustomizer.call(_customizations, collection, icon, props)
                            ];
                        case 1:
                            _state.sent();
                            if (unit) {
                                if (!props.width) props.width = "".concat(scale).concat(unit);
                                if (!props.height) props.height = "".concat(scale).concat(unit);
                            }
                            return [
                                2
                            ];
                    }
                });
            })();
        }
    })
};
var iconLoader = (0, _loader.loader)();
var collection = "";
var name = "";
var svg;
var usedProps = {};
function generateCSS(value) {
    return _generateCSS.apply(this, arguments);
}
function _generateCSS() {
    _generateCSS = _async_to_generator(function(value) {
        var _value, scaleRegex, scaleParts, ref, parts, i, url;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    scaleRegex = /\/([\d.]+)(px|em|rem)?$/i;
                    scaleParts = (_value = value) === null || _value === void 0 ? void 0 : _value.match(scaleRegex);
                    if (scaleParts && typeof scaleParts === "string" && !Number.isNaN(scaleParts)) {
                        value = value.replace(scaleRegex, "");
                        scale = Number(scaleParts);
                    } else if (scaleParts && !Number.isNaN(scaleParts[1])) {
                        value = value.replace(scaleRegex, "");
                        scale = Number(scaleParts[1]);
                        unit = scaleParts[2];
                    }
                    if (!value.includes("/")) return [
                        3,
                        2
                    ];
                    ref = _sliced_to_array(value.split("/"), 2), collection = ref[0], name = ref[1], ref;
                    return [
                        4,
                        iconLoader(collection, name, _object_spread_props(_object_spread({}, loaderOptions), {
                            usedProps: usedProps,
                            scale: scale
                        }))
                    ];
                case 1:
                    svg = _state.sent();
                    return [
                        3,
                        6
                    ];
                case 2:
                    parts = value.split(/-/g);
                    i = COLLECTION_NAME_PARTS_MAX;
                    _state.label = 3;
                case 3:
                    if (!(i >= 1)) return [
                        3,
                        6
                    ];
                    collection = parts.slice(0, i).join("-");
                    name = parts.slice(i).join("-");
                    return [
                        4,
                        iconLoader(collection, name, _object_spread_props(_object_spread({}, loaderOptions), {
                            usedProps: usedProps,
                            scale: scale
                        }))
                    ];
                case 4:
                    svg = _state.sent();
                    if (svg) return [
                        3,
                        6
                    ];
                    _state.label = 5;
                case 5:
                    i--;
                    return [
                        3,
                        3
                    ];
                case 6:
                    if (!svg) {
                        if (warn) console.warn("[tw-icons]", 'failed to load icon "'.concat(value, '"'));
                        return [
                            2,
                            {}
                        ];
                    }
                    url = 'url("data:image/svg+xml;utf8,'.concat((0, _encodesvgforcss.encodeSvgForCss)(svg), '")');
                    if (mode === "auto") mode = svg.includes("currentColor") ? "mask" : "bg";
                    if (mode === "mask") {
                        // Thanks to https://codepen.io/noahblon/post/coloring-svgs-in-css-background-images
                        return [
                            2,
                            _object_spread({
                                "--tw-icon": url,
                                mask: "var(--tw-icon) no-repeat",
                                "mask-size": "100% 100%",
                                "-webkit-mask": "var(--tw-icon) no-repeat",
                                "-webkit-mask-size": "100% 100%",
                                "background-color": "currentColor"
                            }, usedProps)
                        ];
                    } else {
                        return [
                            2,
                            _object_spread({
                                background: "".concat(url, " no-repeat"),
                                "background-size": "100% 100%",
                                "background-color": "transparent"
                            }, usedProps)
                        ];
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return _generateCSS.apply(this, arguments);
}
generateCSS(iconName).then(function(result) {
    return process.stdout.write(JSON.stringify(result));
});
