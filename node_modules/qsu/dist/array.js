import{is2dArray as r,isObject as t}from"./verify.js";export function arrShuffle(r){if(1===r.length)return r[0];const t=r;for(let e=r.length-1;e>0;e-=1){const n=Math.floor(Math.random()*(e+1));[t[e],t[n]]=[r[n],r[e]]}return t}export function arrWithDefault(r,t=0){return t<1?[]:Array(t).fill(r)}export function arrUnique(t){return r(t)?Array.from(new Set(t.map((r=>JSON.stringify(r)))),(r=>JSON.parse(r))):[...new Set(t)]}export function arrWithNumber(r,t){if(r>t)throw new Error("`end` is greater than `start`.");return Array.from({length:t-r+1},((t,e)=>e+r))}export function average(r){return r.reduce(((r,t)=>r+t),0)/r.length}export function arrMove(r,t,e){const n=r.length;if(n<=t||n<=e)throw new Error("Invalid move params");return r.splice(e,0,r.splice(t,1)[0]),r}export function arrTo1dArray(t){const e=t=>{const n=[],o=t.length;for(let u=0;u<o;u+=1)"object"!=typeof t[u]?n.push(t[u]):r(t[u])?n.push(...e(t[u])):n.push(...t[u]);return n};return e(t)}export function arrRepeat(r,e){if(!r||e<1||"object"!=typeof r)return[];const n=t(r),o=[];for(let t=0,u=e;t<u;t+=1)n?o.push(r):o.push(...r);return o}export function arrCount(r){const t={};for(let e=0;e<r.length;e+=1){const n=r[e];t[n]=(t[n]||0)+1}return t}export function sortByObjectKey(r,t,e=!1,n=!1){if(n){const n=new Intl.Collator([],{numeric:!0}),o=r.sort(((r,e)=>n.compare(r[t],e[t])));return e?o.reverse():o}return r.sort(((r,n)=>e?r[t]>n[t]?-1:r[t]<n[t]?1:0:r[t]<n[t]?-1:r[t]>n[t]?1:0))}export function sortNumeric(r,t=!1){const e=new Intl.Collator([],{numeric:!0}),n=r.sort(((r,t)=>e.compare(r,t)));return t?n.reverse():n}export function arrGroupByMaxCount(r,t=1){const e=[],n=r.length;let o=[];for(let u=0;u<n;u+=1)o.length===t&&(e.push(o),o=[]),o.push(r[u]);return o.length>0&&e.push(o),e}